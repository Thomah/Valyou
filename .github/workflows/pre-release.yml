name: Pre-Release

on:
  push:
    branches:
      - feature-github-actions

jobs:

  verify-version:
    runs-on: ubuntu-latest
    outputs:
      is_snapshot: ${{ steps.test_version.outputs.IS_SNAPSHOT }}
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 13
        server-id: github
        settings-path: ${{ github.workspace }}
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
    - name: Test version
      id: test_version
      run: echo ::set-output name=IS_SNAPSHOT::$(if [[ "${{ steps.get_version.outputs.VERSION }}" == *"-SNAPSHOT" ]]; then echo "1"; else echo "0"; fi)

  prepare-release:
    needs: verify-version
    runs-on: ubuntu-latest
    if: needs.verify-version.outputs.is_snapshot == 1
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 13
        server-id: github
        settings-path: ${{ github.workspace }}
    - name: Build with Maven
      run: ./mvnw versions:set -DremoveSnapshot
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
    - name: Push released version
      run: git config user.email "${{ secrets.GIT_CONFIG_EMAIL }}" && git config user.name "${{ secrets.GIT_CONFIG_NAME }}"
    - run: git add pom.xml
    - run: git commit -m "Release '${{ steps.get_version.outputs.VERSION }}'"
    - run: git tag ${{ steps.get_version.outputs.VERSION }}
    - run: git push origin --tags

  build:
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 13
        server-id: github
        settings-path: ${{ github.workspace }}
    - name: Build with Maven
      run: ./mvnw -B clean install --file pom.xml -P docker

  release:
    needs: [prepare-release, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare-release.outputs.version }}
          release_name: Release ${{ needs.prepare-release.outputs.version }}
          draft: false
          prerelease: false